// Gemini AI Service for cultural translations
import { translationService } from './supabase';

const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

console.log('üîß Gemini API Key:', GEMINI_API_KEY ? 'Found' : 'Missing');

if (!GEMINI_API_KEY) {
  console.warn('GEMINI_API_KEY not found in environment variables');
}

export interface GeminiTranslationRequest {
  word: string;
  userOrigin?: string;
  culturalContext?: string;
}

export interface GeminiTranslationResponse {
  word: string;
  translation: string;
  explanation: string;
  example: string;
  culturalBridge: string;
  comparison: string;
}

export interface GeminiCulturalExperienceRequest {
  name: string;
  origin: string;
  destination: string;
}

export interface GeminiCulturalExperienceResponse {
  greeting: string;
  culturalConnection: string;
  recommendedActivities: string[];
  uniqueExperiences: string[];
  culturalBridges: string[];
  practicalTips: string[];
}

class GeminiService {
  // Helper function to suggest similar words when one is not found
  private getSuggestedWords(searchWord: string): string[] {
    const availableWords = ['che', 'mate', 'mita√≠', 'sapucai', 'aguante'];
    
    // Simple similarity based on first letters or common patterns
    const firstLetter = searchWord.toLowerCase().charAt(0);
    const suggested = availableWords.filter(word => 
      word.toLowerCase().charAt(0) === firstLetter
    );
    
    // If no matches by first letter, return random popular words
    if (suggested.length === 0) {
      return ['che', 'mate', 'mita√≠'];
    }
    
    return suggested.length > 3 ? suggested.slice(0, 3) : suggested;
  }

  private async callGeminiAPI(prompt: string): Promise<string> {
    if (!GEMINI_API_KEY) {
      throw new Error('Gemini API key not configured');
    }

    console.log('ü§ñ Calling Gemini API...');
    console.log('üîë API Key exists:', !!GEMINI_API_KEY);

    try {
      const requestBody = {
        contents: [
          {
            parts: [{ text: prompt }]
          }
        ],
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 1,
          maxOutputTokens: 2048,
        },
        safetySettings: [
          {
            category: "HARM_CATEGORY_HARASSMENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE"
          }
        ]
      };

      console.log('üì§ Request body:', JSON.stringify(requestBody, null, 2));

      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);
      console.log('üì° Response headers:', Object.fromEntries(response.headers.entries()));

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Gemini API error response:', errorText);
        
        let errorDetails;
        try {
          errorDetails = JSON.parse(errorText);
        } catch {
          errorDetails = { message: errorText };
        }

        // Handle specific error types
        if (response.status === 429) {
          console.warn('‚ö†Ô∏è Rate limit hit, but this might be temporary or due to concurrent requests');
        } else if (response.status === 400) {
          console.warn('‚ö†Ô∏è Bad request - checking prompt format');
        } else if (response.status === 403) {
          console.warn('‚ö†Ô∏è API key might be invalid or restricted');
        }

        throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);
      }

      const data = await response.json();
      console.log('üìù Gemini API response:', data);
      
      if (!data.candidates?.[0]?.content?.parts?.[0]?.text) {
        console.error('‚ùå Invalid response format:', data);
        throw new Error('Invalid response format from Gemini API');
      }

      console.log('‚úÖ Gemini API call successful');
      return data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error('‚ùå Gemini API call failed:', error);
      throw error;
    }
  }

  async translateWithCulturalContext(request: GeminiTranslationRequest): Promise<GeminiTranslationResponse> {
    const { word, userOrigin = "internacional", culturalContext = "" } = request;

    // Map countries to their primary languages for translation
    const countryLanguageMap: { [key: string]: { lang: string, langCode: string } } = {
      'espa√±a': { lang: 'espa√±ol', langCode: 'es' },
      'mexico': { lang: 'espa√±ol', langCode: 'es' },
      'brasil': { lang: 'portugu√©s', langCode: 'pt' },
      'italia': { lang: 'italiano', langCode: 'it' },
      'francia': { lang: 'franc√©s', langCode: 'fr' },
      'alemania': { lang: 'alem√°n', langCode: 'de' },
      'inglaterra': { lang: 'ingl√©s', langCode: 'en' },
      'estados unidos': { lang: 'ingl√©s', langCode: 'en' },
      'china': { lang: 'chino mandar√≠n', langCode: 'zh' },
      'japon': { lang: 'japon√©s', langCode: 'ja' },
      'corea': { lang: 'coreano', langCode: 'ko' },
      'rusia': { lang: 'ruso', langCode: 'ru' },
      'portugal': { lang: 'portugu√©s', langCode: 'pt' },
      'holanda': { lang: 'holand√©s', langCode: 'nl' },
      'suecia': { lang: 'sueco', langCode: 'sv' },
      'noruega': { lang: 'noruego', langCode: 'no' },
      'finlandia': { lang: 'finland√©s', langCode: 'fi' },
      'grecia': { lang: 'griego', langCode: 'el' },
      'turquia': { lang: 'turco', langCode: 'tr' },
      'india': { lang: 'hindi', langCode: 'hi' },
      'tailandia': { lang: 'tailand√©s', langCode: 'th' },
      'vietnam': { lang: 'vietnamita', langCode: 'vi' },
      'filipinas': { lang: 'filipino', langCode: 'tl' },
      'indonesia': { lang: 'indonesio', langCode: 'id' },
      'malasia': { lang: 'malayo', langCode: 'ms' },
      'singapur': { lang: 'ingl√©s', langCode: 'en' },
      'australia': { lang: 'ingl√©s', langCode: 'en' },
      'nueva zelanda': { lang: 'ingl√©s', langCode: 'en' },
      'canada': { lang: 'ingl√©s', langCode: 'en' },
      'sudafrica': { lang: 'ingl√©s', langCode: 'en' }
    };

    const originKey = userOrigin.toLowerCase().trim();
    const targetLanguage = countryLanguageMap[originKey] || { lang: 'espa√±ol', langCode: 'es' };

    const prompt = `
    Eres un experto en cultura del NEA (Noreste Argentino) especializado en traducciones culturales multiling√ºes.

    Analiza la palabra/expresi√≥n: "${word}"
    Usuario viene de: ${userOrigin}
    Idioma objetivo: ${targetLanguage.lang}
    Contexto adicional: ${culturalContext}

    IMPORTANTE: Responde COMPLETAMENTE en ${targetLanguage.lang}. Todo el JSON debe estar traducido a ${targetLanguage.lang}.

    Proporciona una respuesta en formato JSON exacto con estas claves:

    {
      "word": "${word}",
      "translation": "Traducci√≥n clara y concisa de la palabra del NEA al ${targetLanguage.lang}",
      "explanation": "Explicaci√≥n completa del contexto cultural del NEA, su origen y uso actual - TODO en ${targetLanguage.lang}",
      "example": "Ejemplo pr√°ctico de uso en una oraci√≥n t√≠pica del NEA - explicado y traducido al ${targetLanguage.lang}",
      "culturalBridge": "En mi cultura/lugar de origen (${userOrigin}) - en ${targetLanguage.lang}",
      "comparison": "Comparaci√≥n espec√≠fica con expresiones similares de ${userOrigin} - TODO explicado en ${targetLanguage.lang}. Usa formato cultural apropiado para ${userOrigin}"
    }

    REGLAS CR√çTICAS:
    - TODO el contenido debe estar en ${targetLanguage.lang}
    - Si es espa√±ol/M√©xico: mant√©n en espa√±ol
    - Si es ingl√©s: traduce TODO al ingl√©s
    - Si es portugu√©s: traduce TODO al portugu√©s
    - Si es italiano: traduce TODO al italiano
    - Si es franc√©s: traduce TODO al franc√©s
    - Si es alem√°n: traduce TODO al alem√°n
    - Si es chino: traduce TODO al chino
    - Si es japon√©s: traduce TODO al japon√©s
    - Responde SOLO en formato JSON v√°lido
    - Si no conoces la palabra, indica "Palabra no encontrada" pero en ${targetLanguage.lang}
    - Enf√≥cate en aspectos culturales √∫nicos del NEA pero expl√≠calos en ${targetLanguage.lang}
    - Incluye referencias guaran√≠es si aplica pero expl√≠calas en ${targetLanguage.lang}
    - Haz comparaciones culturales reales y espec√≠ficas de ${userOrigin} en ${targetLanguage.lang}
    `;

    try {
      const response = await this.callGeminiAPI(prompt);
      
      // Try to parse JSON response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in Gemini response');
      }

      const parsedResponse = JSON.parse(jsonMatch[0]);
      
      // Validate required fields
      const requiredFields = ['word', 'translation', 'explanation', 'example', 'culturalBridge', 'comparison'];
      for (const field of requiredFields) {
        if (!parsedResponse[field]) {
          throw new Error(`Missing required field: ${field}`);
        }
      }

      return parsedResponse as GeminiTranslationResponse;

    } catch (error) {
      console.error('Error calling Gemini API:', error);
      
      // Return fallback response completely in target language
      const fallbackMessages = {
        'espa√±ol': {
          translation: 'No se pudo procesar la traducci√≥n',
          explanation: 'Error al conectar con el servicio de traducci√≥n cultural.',
          example: 'Intenta de nuevo en unos momentos.',
          culturalBridge: `En mi cultura/lugar de origen (${userOrigin})`,
          comparison: 'No disponible temporalmente. Verifica tu conexi√≥n a internet.'
        },
        'ingl√©s': {
          translation: 'Could not process translation',
          explanation: 'Error connecting to the cultural translation service.',
          example: 'Please try again in a few moments.',
          culturalBridge: `In my culture/place of origin (${userOrigin})`,
          comparison: 'Temporarily unavailable. Check your internet connection.'
        },
        'portugu√©s': {
          translation: 'N√£o foi poss√≠vel processar a tradu√ß√£o',
          explanation: 'Erro ao conectar com o servi√ßo de tradu√ß√£o cultural.',
          example: 'Tente novamente em alguns momentos.',
          culturalBridge: `Na minha cultura/local de origem (${userOrigin})`,
          comparison: 'Temporariamente indispon√≠vel. Verifique sua conex√£o com a internet.'
        },
        'franc√©s': {
          translation: 'Impossible de traiter la traduction',
          explanation: 'Erreur de connexion au service de traduction culturelle.',
          example: 'Veuillez r√©essayer dans quelques instants.',
          culturalBridge: `Dans ma culture/lieu d'origine (${userOrigin})`,
          comparison: 'Temporairement indisponible. V√©rifiez votre connexion internet.'
        },
        'italiano': {
          translation: 'Impossibile elaborare la traduzione',
          explanation: 'Errore di connessione al servizio di traduzione culturale.',
          example: 'Riprova tra qualche momento.',
          culturalBridge: `Nella mia cultura/luogo di origine (${userOrigin})`,
          comparison: 'Temporaneamente non disponibile. Controlla la connessione internet.'
        },
        'alem√°n': {
          translation: '√úbersetzung konnte nicht verarbeitet werden',
          explanation: 'Fehler beim Verbinden mit dem kulturellen √úbersetzungsdienst.',
          example: 'Bitte versuchen Sie es in ein paar Augenblicken erneut.',
          culturalBridge: `In meiner Kultur/Herkunftsort (${userOrigin})`,
          comparison: 'Vor√ºbergehend nicht verf√ºgbar. √úberpr√ºfen Sie Ihre Internetverbindung.'
        }
      };

      const messages = fallbackMessages[targetLanguage.lang as keyof typeof fallbackMessages] || fallbackMessages['espa√±ol'];

      return {
        word,
        translation: messages.translation,
        explanation: messages.explanation,
        example: messages.example,
        culturalBridge: messages.culturalBridge,
        comparison: messages.comparison
      };
    }
  }

  async getEnhancedTranslation(
    word: string, 
    userOrigin?: string, 
    culturalContext?: string
  ): Promise<GeminiTranslationResponse> {
    try {
      // Map country to language for database operations
      const countryLanguageMap: { [key: string]: { lang: string, langCode: string } } = {
        'espa√±a': { lang: 'espa√±ol', langCode: 'es' },
        'mexico': { lang: 'espa√±ol', langCode: 'es' },
        'brasil': { lang: 'portugu√©s', langCode: 'pt' },
        'italia': { lang: 'italiano', langCode: 'it' },
        'francia': { lang: 'franc√©s', langCode: 'fr' },
        'alemania': { lang: 'alem√°n', langCode: 'de' },
        'inglaterra': { lang: 'ingl√©s', langCode: 'en' },
        'estados unidos': { lang: 'ingl√©s', langCode: 'en' },
        'china': { lang: 'chino mandar√≠n', langCode: 'zh' },
        'japon': { lang: 'japon√©s', langCode: 'ja' }
      };

      const originKey = userOrigin?.toLowerCase().trim() || 'internacional';
      const targetLanguage = countryLanguageMap[originKey]?.lang || 'espa√±ol';

      // First, try to get from Supabase database with user origin and language
      const dbTranslation = await translationService.getTranslation(word, originKey, targetLanguage);
      
      if (dbTranslation) {
        console.log('‚úÖ Found translation in database, returning cached version');
        
        // Return database version with personalized cultural bridge (no Gemini call)
        const personalizedBridge = userOrigin && userOrigin !== "internacional" 
          ? `En mi cultura/lugar de origen (${userOrigin})`
          : (dbTranslation.cultural_bridge || "En mi cultura/lugar de origen");
        
        const personalizedComparison = userOrigin && userOrigin !== "internacional"
          ? `Al igual que las expresiones culturales en ${userOrigin}, "${dbTranslation.word}" del NEA muestra c√≥mo el lenguaje conecta comunidades. ${dbTranslation.comparison}`
          : dbTranslation.comparison;
        
        return {
          word: dbTranslation.word,
          translation: dbTranslation.translation,
          explanation: dbTranslation.explanation,
          example: dbTranslation.example,
          culturalBridge: personalizedBridge,
          comparison: personalizedComparison
        };
      }
      
      console.log('‚ö†Ô∏è Word not found in database, making ONE Gemini call...');
      
      // If not in database, make ONE Gemini call to generate new translation
      try {
        const geminiResponse = await this.translateWithCulturalContext({
          word,
          userOrigin,
          culturalContext
        });

        // Try to save to database for future use (avoid future Gemini calls)
        try {
          await translationService.addTranslation({
            word: geminiResponse.word,
            user_origin: originKey,
            target_language: targetLanguage,
            translation: geminiResponse.translation,
            explanation: geminiResponse.explanation,
            example: geminiResponse.example,
            cultural_bridge: geminiResponse.culturalBridge,
            comparison: geminiResponse.comparison
          });
          console.log(`‚úÖ Saved new translation to database (${originKey} -> ${targetLanguage}) to avoid future API calls`);
        } catch (saveError) {
          console.warn('Could not save translation to database:', saveError);
        }

        return geminiResponse;
      } catch (geminiError) {
        console.warn('‚ö†Ô∏è Gemini not available, returning fallback response');
        
        // Final fallback: Return a helpful message suggesting available words
        const suggestedWords = this.getSuggestedWords(word);
        
        // Get target language for fallback messages
        const countryLanguageMap: { [key: string]: { lang: string, langCode: string } } = {
          'espa√±a': { lang: 'espa√±ol', langCode: 'es' },
          'mexico': { lang: 'espa√±ol', langCode: 'es' },
          'brasil': { lang: 'portugu√©s', langCode: 'pt' },
          'italia': { lang: 'italiano', langCode: 'it' },
          'francia': { lang: 'franc√©s', langCode: 'fr' },
          'alemania': { lang: 'alem√°n', langCode: 'de' },
          'inglaterra': { lang: 'ingl√©s', langCode: 'en' },
          'estados unidos': { lang: 'ingl√©s', langCode: 'en' },
          'china': { lang: 'chino mandar√≠n', langCode: 'zh' },
          'japon': { lang: 'japon√©s', langCode: 'ja' }
        };
        
        const originKey = userOrigin?.toLowerCase().trim() || '';
        const targetLanguage = countryLanguageMap[originKey] || { lang: 'espa√±ol', langCode: 'es' };
        
        const notFoundMessages = {
          'espa√±ol': {
            translation: 'Palabra no encontrada en nuestra base de datos',
            explanation: `La palabra "${word}" no est√° disponible en nuestra base de datos del NEA. Puede ser que no sea una expresi√≥n t√≠pica de la regi√≥n, que est√© mal escrita, o que a√∫n no la hayamos agregado a nuestra colecci√≥n.`,
            example: `Prueba con estas palabras del NEA: ${suggestedWords.map(w => `"${w}"`).join(', ')}`,
            culturalBridge: userOrigin ? `En mi cultura/lugar de origen (${userOrigin})` : "En mi cultura/lugar de origen",
            comparison: `Cada palabra del NEA tiene conexiones culturales √∫nicas. Las palabras ${suggestedWords.join(', ')} est√°n disponibles y muestran puentes culturales fascinantes con diferentes regiones del mundo.`
          },
          'ingl√©s': {
            translation: 'Word not found in our database',
            explanation: `The word "${word}" is not available in our NEA database. It may not be a typical expression from the region, it could be misspelled, or we haven't added it to our collection yet.`,
            example: `Try these NEA words: ${suggestedWords.map(w => `"${w}"`).join(', ')}`,
            culturalBridge: userOrigin ? `In my culture/place of origin (${userOrigin})` : "In my culture/place of origin",
            comparison: `Each NEA word has unique cultural connections. The words ${suggestedWords.join(', ')} are available and show fascinating cultural bridges with different regions of the world.`
          },
          'portugu√©s': {
            translation: 'Palavra n√£o encontrada em nossa base de dados',
            explanation: `A palavra "${word}" n√£o est√° dispon√≠vel em nossa base de dados do NEA. Pode ser que n√£o seja uma express√£o t√≠pica da regi√£o, esteja mal escrita, ou ainda n√£o a tenhamos adicionado √† nossa cole√ß√£o.`,
            example: `Experimente estas palavras do NEA: ${suggestedWords.map(w => `"${w}"`).join(', ')}`,
            culturalBridge: userOrigin ? `Na minha cultura/local de origem (${userOrigin})` : "Na minha cultura/local de origem",
            comparison: `Cada palavra do NEA tem conex√µes culturais √∫nicas. As palavras ${suggestedWords.join(', ')} est√£o dispon√≠veis e mostram pontes culturais fascinantes com diferentes regi√µes do mundo.`
          },
          'franc√©s': {
            translation: 'Mot non trouv√© dans notre base de donn√©es',
            explanation: `Le mot "${word}" n'est pas disponible dans notre base de donn√©es NEA. Il se peut qu'il ne s'agisse pas d'une expression typique de la r√©gion, qu'il soit mal orthographi√©, ou que nous ne l'ayons pas encore ajout√© √† notre collection.`,
            example: `Essayez ces mots NEA : ${suggestedWords.map(w => `"${w}"`).join(', ')}`,
            culturalBridge: userOrigin ? `Dans ma culture/lieu d'origine (${userOrigin})` : "Dans ma culture/lieu d'origine",
            comparison: `Chaque mot NEA a des connexions culturelles uniques. Les mots ${suggestedWords.join(', ')} sont disponibles et montrent des ponts culturels fascinants avec diff√©rentes r√©gions du monde.`
          },
          'italiano': {
            translation: 'Parola non trovata nel nostro database',
            explanation: `La parola "${word}" non √® disponibile nel nostro database NEA. Potrebbe non essere un'espressione tipica della regione, essere scritta male, o non averla ancora aggiunta alla nostra collezione.`,
            example: `Prova queste parole NEA: ${suggestedWords.map(w => `"${w}"`).join(', ')}`,
            culturalBridge: userOrigin ? `Nella mia cultura/luogo di origine (${userOrigin})` : "Nella mia cultura/luogo di origine",
            comparison: `Ogni parola NEA ha connessioni culturali uniche. Le parole ${suggestedWords.join(', ')} sono disponibili e mostrano ponti culturali affascinanti con diverse regioni del mondo.`
          },
          'alem√°n': {
            translation: 'Wort in unserer Datenbank nicht gefunden',
            explanation: `Das Wort "${word}" ist in unserer NEA-Datenbank nicht verf√ºgbar. Es k√∂nnte sein, dass es kein typischer Ausdruck der Region ist, falsch geschrieben wurde oder wir es noch nicht zu unserer Sammlung hinzugef√ºgt haben.`,
            example: `Probieren Sie diese NEA-W√∂rter: ${suggestedWords.map(w => `"${w}"`).join(', ')}`,
            culturalBridge: userOrigin ? `In meiner Kultur/Herkunftsort (${userOrigin})` : "In meiner Kultur/Herkunftsort",
            comparison: `Jedes NEA-Wort hat einzigartige kulturelle Verbindungen. Die W√∂rter ${suggestedWords.join(', ')} sind verf√ºgbar und zeigen faszinierende kulturelle Br√ºcken zu verschiedenen Regionen der Welt.`
          }
        };
        
        const messages = notFoundMessages[targetLanguage.lang as keyof typeof notFoundMessages] || notFoundMessages['espa√±ol'];
        
        return {
          word,
          translation: messages.translation,
          explanation: messages.explanation,
          example: messages.example,
          culturalBridge: messages.culturalBridge,
          comparison: messages.comparison
        };
      }

    } catch (error) {
      console.error('Error in getEnhancedTranslation:', error);
      throw error;
    }
  }

  async generateCulturalExperience(request: GeminiCulturalExperienceRequest): Promise<GeminiCulturalExperienceResponse> {
    const { name, origin, destination } = request;
    
    const destinationNames = {
      corrientes: 'Corrientes',
      resistencia: 'Resistencia', 
      posadas: 'Posadas',
      formosa: 'Formosa'
    };
    
    const fullDestinationName = destinationNames[destination as keyof typeof destinationNames] || destination;

    const prompt = `
    Eres un experto en turismo cultural del NEA (Noreste Argentino) especializado en crear experiencias personalizadas.

    Datos del usuario:
    - Nombre: ${name}
    - Origen cultural: ${origin}
    - Destino elegido: ${fullDestinationName}, NEA Argentina

    Crea una experiencia cultural personalizada en formato JSON exacto con estas claves:

    {
      "greeting": "Saludo personalizado y c√°lido para ${name}",
      "culturalConnection": "Explicaci√≥n breve de conexiones entre la cultura de ${origin} y ${fullDestinationName}",
      "recommendedActivities": [
        "Actividad 1 espec√≠fica de ${fullDestinationName} que conecte con ${origin}",
        "Actividad 2 espec√≠fica de ${fullDestinationName} que conecte con ${origin}",
        "Actividad 3 espec√≠fica de ${fullDestinationName} que conecte con ${origin}"
      ],
      "uniqueExperiences": [
        "Experiencia √∫nica 1 que solo se puede vivir en ${fullDestinationName}",
        "Experiencia √∫nica 2 que solo se puede vivir en ${fullDestinationName}"
      ],
      "culturalBridges": [
        "Puente cultural 1: similitudes entre ${origin} y NEA",
        "Puente cultural 2: diferencias enriquecedoras entre ${origin} y NEA"
      ],
      "practicalTips": [
        "Consejo pr√°ctico 1 espec√≠fico para alguien de ${origin}",
        "Consejo pr√°ctico 2 espec√≠fico para alguien de ${origin}"
      ]
    }

    IMPORTANTE:
    - Responde SOLO en formato JSON v√°lido
    - Usa conocimiento real sobre ${fullDestinationName} y cultura de ${origin}
    - S√© espec√≠fico y aut√©ntico, evita generalidades
    - Incluye aspectos √∫nicos del NEA (guaran√≠, chamam√©, gastronom√≠a, r√≠o Paran√°, etc.)
    - Haz conexiones culturales reales y significativas
    `;

    try {
      const response = await this.callGeminiAPI(prompt);
      
      // Try to parse JSON response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in Gemini response');
      }

      const parsedResponse = JSON.parse(jsonMatch[0]);
      
      // Validate required fields
      const requiredFields = ['greeting', 'culturalConnection', 'recommendedActivities', 'uniqueExperiences', 'culturalBridges', 'practicalTips'];
      for (const field of requiredFields) {
        if (!parsedResponse[field]) {
          throw new Error(`Missing required field: ${field}`);
        }
      }

      return parsedResponse as GeminiCulturalExperienceResponse;

    } catch (error) {
      console.error('Error generating cultural experience:', error);
      
      // Return fallback response
      return {
        greeting: `¬°Hola ${name}! Bienvenido/a a tu aventura cultural en ${fullDestinationName}`,
        culturalConnection: `Tu origen de ${origin} tiene conexiones fascinantes con la cultura del NEA que exploraremos juntos.`,
        recommendedActivities: [
          `Visitar el centro hist√≥rico de ${fullDestinationName} y comparar con arquitectura de ${origin}`,
          `Disfrutar de la gastronom√≠a local y encontrar sabores que te recuerden a casa`,
          `Participar en festivales culturales que celebran las tradiciones del NEA`
        ],
        uniqueExperiences: [
          `Navegar por el r√≠o Paran√° y experimentar la conexi√≥n √∫nica con la naturaleza`,
          `Escuchar chamam√© en vivo y aprender sobre esta m√∫sica tradicional`
        ],
        culturalBridges: [
          `Ambas culturas valoran la importancia de la familia y las tradiciones`,
          `El NEA y ${origin} comparten el amor por las celebraciones comunitarias`
        ],
        practicalTips: [
          `Como vienes de ${origin}, te recomendamos probar el mate - es nuestro ritual social m√°s importante`,
          `El clima del NEA puede ser diferente a ${origin}, lleva ropa c√≥moda y liviana`
        ]
      };
    }
  }
}

export const geminiService = new GeminiService();